# Build stage for Node.js
FROM node:21-slim as builder-node

# Set the working directory for Node.js
WORKDIR /app

# Install make
RUN apt-get update && apt-get install -y make

# Copy make file
COPY Makefile ./

# Copy the Node.js application and dependencies
COPY app/package.json app/package-lock.json ./

# Copy the frontend source code
COPY ./ ./

# Build the Node.js frontend
RUN make build-js

FROM golang:1.22.3 as builder-go

# Set destination for COPY
WORKDIR /app

# Install make
RUN apt-get update && apt-get install -y nodejs npm

# Create a non-root user blackflame
RUN adduser --disabled-password --gecos '' blackflame

# Change ownership of Go module cache directories
RUN mkdir /.cache
RUN chown -R 1000:1000 /.cache /app

# Switch to the non-root user
USER 1000:1000

# Download Go modules
COPY go.mod go.sum ./
RUN go mod download

# Copy the source code. Note the slash at the end, as explained in
# https://docs.docker.com/engine/reference/builder/#copy
COPY ./ ./

# Build
RUN CGO_ENABLED=0 GOOS=linux go build -o ./tmp/main cmd/nicklesseos.com/main.go

# Optional:
# To bind to a TCP port, runtime parameters must be supplied to the docker command.
# But we can document in the Dockerfile what ports
# the application is going to listen on by default.
# https://docs.docker.com/engine/reference/builder/#expose
EXPOSE 3000

# Run the application
CMD ["go", "run", "github.com/air-verse/air@latest"]